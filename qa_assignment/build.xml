<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- WARNING: Eclipse auto-generated file.
              Any modifications will be overwritten.
              To include a user specific buildfile here, simply create one in the same
              directory with the processing instruction <?eclipse.ant.import?>
              as the first entry and export the buildfile again. -->
<project basedir="." default="build-main" name="Web_Application" xmlns:jacoco="antlib:org.jacoco.ant">
    <property environment="env"/>
	<property file="build.properties"/>	
    <property name="ECLIPSE_HOME" value="../../Downloads/eclipse-j2ee/eclipse/"/>
    <property name="debuglevel" value="source,lines,vars"/>
    <property name="target" value="1.8"/>
    <property name="source" value="1.8"/>
	<property name="warFileName" value="Web_Application.war"></property>
    <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
        <classpath path="lib/jacocoant.jar" />
    </taskdef>
    <path id="Apache Tomcat v9.0 [Apache Tomcat v9.0].libraryclasspath">
        <pathelement location="${basedir}/lib/ecj-4.15.jar"/>
        <pathelement location="${basedir}/lib/jasper-el.jar"/>
        <pathelement location="${basedir}/lib/tomcat-i18n-de.jar"/>
        <pathelement location="${basedir}/lib/catalina.jar"/>
        <pathelement location="${basedir}/lib/tomcat-i18n-pt-BR.jar"/>
        <pathelement location="${basedir}/lib/servlet-api.jar"/>
        <pathelement location="${basedir}/lib/tomcat-util-scan.jar"/>
        <pathelement location="${basedir}/lib/catalina-ssi.jar"/>
        <pathelement location="${basedir}/lib/tomcat-websocket.jar"/>
        <pathelement location="${basedir}/lib/catalina-ant.jar"/>
        <pathelement location="${basedir}/lib/tomcat-coyote.jar"/>
        <pathelement location="${basedir}/lib/jasper.jar"/>
        <pathelement location="${basedir}/lib/tomcat-jni.jar"/>
        <pathelement location="${basedir}/lib/catalina-storeconfig.jar"/>
        <pathelement location="${basedir}/lib/tomcat-i18n-es.jar"/>
        <pathelement location="${basedir}/lib/catalina-ha.jar"/>
        <pathelement location="${basedir}/lib/websocket-api.jar"/>
        <pathelement location="${basedir}/lib/tomcat-i18n-ru.jar"/>
        <pathelement location="${basedir}/lib/tomcat-i18n-zh-CN.jar"/>
        <pathelement location="${basedir}/lib/tomcat-i18n-ja.jar"/>
        <pathelement location="${basedir}/lib/tomcat-util.jar"/>
        <pathelement location="${basedir}/lib/jsp-api.jar"/>
        <pathelement location="${basedir}/lib/el-api.jar"/>
        <pathelement location="${basedir}/lib/annotations-api.jar"/>
        <pathelement location="${basedir}/lib/tomcat-i18n-cs.jar"/>
        <pathelement location="${basedir}/lib/tomcat-i18n-fr.jar"/>
        <pathelement location="${basedir}/lib/tomcat-i18n-ko.jar"/>
        <pathelement location="${basedir}/lib/catalina-tribes.jar"/>
        <pathelement location="${basedir}/lib/tomcat-jdbc.jar"/>
        <pathelement location="${basedir}/lib/jaspic-api.jar"/>
        <pathelement location="${basedir}/lib/tomcat-dbcp.jar"/>
        <pathelement location="${basedir}/lib/tomcat-api.jar"/>
    </path>
    <path id="Web_Application.classpath">
        <pathelement location="build/classes"/>
        <path refid="Apache Tomcat v9.0 [Apache Tomcat v9.0].libraryclasspath"/>
        <pathelement location="${basedir}/lib/mockito-core-3.3.3-javadoc.jar"/>
        <pathelement location="${basedir}/lib/mockito-core-3.3.3.jar"/>
        <pathelement location="${basedir}/lib//byte-buddy-1.10.5.jar"/>
        <pathelement location="${basedir}/lib//byte-buddy-agent-1.10.5.jar"/>
        <pathelement location="${basedir}/lib//objenesis-2.6.jar"/>
    </path>
    <path id="Junit.libraryclasspath">
        <pathelement location="build/test/classes"/>
    	<pathelement location="build/classes"/>
        <pathelement location="${basedir}/lib/org.junit_4.13.0.v20200204-1500.jar"/>
    	<pathelement location="${basedir}/lib/org.hamcrest.core_1.3.0.v20180420-1519.jar"/>
    	<pathelement location="${basedir}/lib/easymock-4.2.jar"/>
    	<pathelement location="${basedir}/lib/servlet-api.jar"/>
    </path>	
    <path id="Selenium.libraryclasspath">
        <pathelement location="build/selenium/classes"/>
        <pathelement location="${basedir}/lib/client-combined-4.0.0-alpha-2-sources.jar"/>
    	<pathelement location="${basedir}/lib/client-combined-4.0.0-alpha-2.jar"/>
    	<pathelement location="${basedir}/lib/byte-buddy-1.9.12.jar"/>
    	<pathelement location="${basedir}/lib/commons-exec-1.3.jar"/>
    	<pathelement location="${basedir}/lib/failureaccess-1.0.1.jar"/>
    	<pathelement location="${basedir}/lib/guava-27.1-jre.jar"/>
    	<pathelement location="${basedir}/lib/listenablefuture-1.0.jar"/>
    	<pathelement location="${basedir}/lib/okhttp-3.14.0.jar"/>
    	<pathelement location="${basedir}/lib/okio-1.17.3.jar"/>    	
    	<pathelement location="${basedir}/lib/opentracing-api-0.33.0.jar"/>
    	<pathelement location="${basedir}/lib/opentracing-noop-0.33.0.jar"/>  
    	<pathelement location="${basedir}/lib/opentracing-tracerresolver-0.1.7.jar"/> 
    	<pathelement location="${basedir}/lib/opentracing-util-0.33.0.jar"/>  
    	<pathelement location="${basedir}/lib/org.junit_4.13.0.v20200204-1500.jar"/>
    	<pathelement location="${basedir}/lib/org.hamcrest.core_1.3.0.v20180420-1519.jar"/>
    	<pathelement location="${basedir}/lib/commons-io-2.6.jar"/>  
    </path>		

    <target name="clean">
    	<delete dir="build" quiet="true"/>
    	<delete dir="${basedir}/testReport" quiet="true"/>
    	<delete dir="${basedir}/junitResult" quiet="true"/>
    	<delete dir="${basedir}/jacocoCoverage" quiet="true"/>
    	<delete file="${basedir}/${warFileName}" quiet="true"/>
    </target>
	
    <target name="build-main" depends="clean">
    	<delete dir="build/classes" quiet="true"/>
    	<mkdir dir="build/classes" />
        <echo message="${ant.project.name}: ${ant.file}"/>
        <javac debug="true" debuglevel="${debuglevel}" destdir="build/classes" includeantruntime="false" source="${source}" target="${target}">
            <src path="src"/>
            <classpath refid="Web_Application.classpath"/>
        </javac>
    </target>

    <target name="build-test" depends="build-main">
    	<delete dir="build/test/classes" quiet="true"/>
    	<mkdir dir="build/test/classes" />
        <echo message="${ant.project.name}: ${ant.file}"/>
        <javac debug="true" debuglevel="${debuglevel}" destdir="build/test/classes" includeantruntime="false" source="${source}" target="${target}">
        	<src path="unittest"/>
        	<classpath refid="Junit.libraryclasspath"/>
        </javac>
    </target>	

    <!-- 定义默认任务，将class文件集合成war包。 -->
    <target name="build-war" depends="coveragereport">
        <!-- 建立新war包。 -->
        <war destfile="${basedir}/${warFileName}" webxml="${basedir}/WebContent/WEB-INF/web.xml">
            <!-- 将非jar和非class文件拷贝到war包的对应路径下。 -->
            <fileset dir="${basedir}/WebContent">
                <include name="**/**.*"/>
                <exclude name="**/*.jar"/>
                <exclude name="**/*.class"/>
            </fileset>
            <!-- 将jar和class文件拷贝到war包的对应路径下。 -->
            <lib dir="${basedir}/lib"/>
            <classes dir="${basedir}/build/classes"/>
        </war>
    </target>
	
	<target name = "deploy-war" depends = "build-war" description = "Deploy application as a WAR file">
	      <copy todir = "${deploy.path}" preservelastmodified = "true">
	         <fileset dir = "${basedir}">
	            <include name = "*.war"/>
	         </fileset>
	      </copy>
	 </target>	
	
	<!-- ******************* Coverage ************************-->
	<target name="junittest" depends="build-test">  
		<delete dir="${basedir}/junitResult" quiet="true"/>
		<mkdir dir="${basedir}/junitResult" />
	        <jacoco:coverage destfile="${basedir}/jacoco.exec">
	    		<junit printsummary="yes" fork="true" failureproperty="junit.failure"> 
	    			<classpath>
	    				<path refid="Junit.libraryclasspath"/> 
	    				<pathelement location="build/test/classes"/> 
	    			</classpath>
	    			<formatter type="xml"/> 
	    			<batchtest todir="${basedir}/junitResult"> 
	    				<fileset dir="unittest" includes="**/*Test.java"/> 
	    			</batchtest> 
	    		</junit> 
	        </jacoco:coverage>
		
		<!--生成Junit html的测试报告--> 
		<delete dir="${basedir}/testReport" quiet="true"/>
		<mkdir dir="${basedir}/testReport" />
		<junitreport todir="${basedir}/testReport"> 
			<fileset dir="${basedir}/junitResult">
				<include name="TEST-*.xml"/> 
			</fileset> 
			<report format="frames" todir="${basedir}/testReport"/>
		</junitreport> 
	 
		<!--删除xml的测试结果-->
		<!--delete dir="${basedir}/junitResult" quiet="true">
			<include name="*.xml" />
		</delete--> 	
		
		<fail message="Junit test failed" if='junit.failure'>
		</fail>		
	</target>
	
	<target name="coveragereport" depends="junittest">
		<delete dir="${basedir}/jacocoCoverage" quiet="true"/>
		<mkdir dir="${basedir}/jacocoCoverage" />
	        <jacoco:report>  
	            <executiondata>  
	                <file file="${basedir}/jacoco.exec" />  
	            </executiondata>  
	            <structure name="unit test coverage rate report.">  
	                <classfiles>  
	                	<fileset dir="build/classes"/>
	                </classfiles>  
	                <sourcefiles encoding="UTF-8">
	                	<fileset dir="src"/>
	                </sourcefiles>
	            </structure>
	            <html footer="footer" destdir="${basedir}/jacocoCoverage" />  
	            <csv destfile="${basedir}/jacocoCoverage/coverage-report.csv" />  
	            <xml destfile="${basedir}/jacocoCoverage/coverage-report.xml" />  
	        </jacoco:report>
		
		<loadresource property="coveragePercentage" >
				<file file="${basedir}/jacocoCoverage/index.html" /> 
			<filterchain>
				<!--tr><td>Total</td><td class="bar">12 of 175</td><td class="ctr2" Do not remove-->
				<replaceregex pattern="^([\s\S]*)((&lt;)td(&gt;)Total(&lt;)\/td(&gt;)(&lt;)td class\=(&quot;)bar(&quot;)(&gt;)([1-9]\d*) of ([1-9]\d*)(&lt;)\/td(&gt;)(&lt;)td class\=(&quot;)ctr2(&quot;)(&gt;))" replace=""/>
				<replaceregex pattern="(\%(&lt;)\/td(&gt;))([\s\S]*)$" replace=""/>
				</filterchain>
		</loadresource>
		<echo message="Code Coverage is ${coveragePercentage}"/>
		
		<condition property="coverageAboveEighty">
		  	<matches pattern="[8-9]{1}[0-9]{1}|(100)" string="${coveragePercentage}"/>
			<!--matches pattern="9[4-9]{1}|(100)" string="${coveragePercentage}"/-->
		</condition>
		<fail message="Code Coverage is under 80%"
		      unless="coverageAboveEighty"/>	
	    </target>

	
	<!-- ******************* Selenium ************************-->
	
    <target name="clean-selenium">
        <delete quiet="true">
        	<fileset dir="build/selenium/classes"/>
        	<fileset dir="selenium/resources"/>   
        	<fileset dir="testReportSelenium"/>        	
        </delete>
    </target>	
	
    <target name="build-selenium-test">
        <echo message="Build Selenium Test Class"/>
		<delete dir="${basedir}/build/selenium/classes" quiet="true"/>
		<mkdir dir="${basedir}/build/selenium/classes" />
        <javac debug="true" debuglevel="${debuglevel}" destdir="build/selenium/classes" includeantruntime="false" source="${source}" target="${target}">
            <src path="selenium"/>
            <classpath refid="Web_Application.classpath"/>
        	<classpath refid="Junit.libraryclasspath"/>
        	<classpath refid="Selenium.libraryclasspath"/>
        </javac>
    </target>	
	
	<target name="seleniumtest" depends="clean-selenium, build-selenium-test" > 
		<delete dir="${basedir}/testReportSelenium" quiet="true"/>
		<mkdir dir="${basedir}/testReportSelenium" />
	 	
		<junit printsummary="yes" failureproperty="selenium.failure"> 
			<classpath refid="Junit.libraryclasspath"/> 
			<classpath refid="Selenium.libraryclasspath"/>
			<formatter type="xml"/> 
			<batchtest todir="${basedir}/testReportSelenium"> 
				<fileset dir="build/selenium/classes"> 
					<include name="**/*Test.class"/> 
				</fileset> 
			</batchtest> 
		</junit> 
		

		<junitreport todir="${basedir}/testReportSelenium"> 
			<fileset dir="${basedir}/testReportSelenium">
				<include name="TEST-*.xml"/> 
			</fileset> 
			<report format="frames" todir="${basedir}/testReportSelenium"/>
		</junitreport> 
	 

		<delete dir="${basedir}/testReportSelenium" quiet="true">
			<include name="*.xml" />
		</delete> 
		
		<fail message="Selenium test failed." if='selenium.failure'>
		</fail>		
	</target>	
</project>
